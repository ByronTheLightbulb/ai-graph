from typing import List, Tuple
import logging

def generate_mermaid_diagram(
    task_descriptions: List[str],
    dependencies: List[Tuple[int, List[int]]],
    output_filename: str = "mermaid_diagram.html"
):
    """
    Generates an HTML file containing a Mermaid.js diagram of task dependencies.

    This function creates a visual representation of a task graph, making it easy to understand
    the relationships and execution flow. The diagram is interactive, allowing for zooming and panning.

    Args:
        task_descriptions (List[str]): A list of descriptions for each task.
        dependencies (List[Tuple[int, List[int]]]): A list of tuples representing dependencies,
                                                     e.g., [(1, [0])].
        output_filename (str): The name of the output HTML file.
    """
    logging.basicConfig(level=logging.INFO)
    logging.info(f"Generating Mermaid diagram and saving to '{output_filename}'.")

    mermaid_graph_lines = ["graph TD"]  # TD = Top to Down

    # Add nodes to the graph
    for i, desc in enumerate(task_descriptions):
        # Sanitize description for Mermaid syntax
                safe_desc = desc.replace('"', '&quot;')
                mermaid_graph_lines.append(f'    T{i}["{safe_desc}"]')

    # Add edges (dependencies) to the graph
    for node, deps in dependencies:
        for dep in deps:
            mermaid_graph_lines.append(f"    T{dep} --> T{node}")

    mermaid_code = "\n".join(mermaid_graph_lines)

    html_template = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Mermaid Task Dependency Graph</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            background-color: #f0f2f5;
        }}
        .mermaid {{
            width: 100%;
            max-width: fit-content;
            height: auto;
            display: block;
            overflow: auto;
            padding: 30px;
            box-sizing: border-box;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            /* Enable full zooming and panning */
            touch-action: pan-x pan-y;
        }}
        /* Styles for the SVG generated by Mermaid */
        .mermaid svg {{
            max-width: none !important;
            height: auto !important;
            overflow: visible !important;
            /* Allow larger rendering space if needed */
            min-width: 1200px; /* Example: ensure a minimum width */
            min-height: 800px; /* Example: ensure a minimum height */
        }}
        /* Styles for individual nodes and their text */
        .node rect {{
            fill: #e6f7ff;
            stroke: #337ab7;
            stroke-width: 1.5px;
            rx: 5px;
            ry: 5px;
        }}
        .node text {{
            font-size: 16px !important;
            fill: #333;
            text-anchor: middle;
            dominant-baseline: central;
            white-space: pre-wrap;
            word-wrap: break-word;
            padding: 10px;
        }}
        /* Ensure that the text element itself wraps */
        .node foreignObject {{
            overflow: visible !important;
        }}
        .node label {{
            display: block;
            text-align: center;
            padding: 8px;
            box-sizing: border-box;
            word-break: break-word;
            /* Optional: limit height/width if you want to force more wrapping earlier */
            /* max-width: 250px; */
            /* max-height: 200px; */
        }}
    </style>
    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
      mermaid.initialize({{
          startOnLoad: true,
          flowchart: {{
              curve: 'basis',
              htmlLabels: true,
              nodeSpacing: 100,
              rankSpacing: 100,
              // You can also try 'elk' renderer for potentially better layout with complex diagrams
              // defaultRenderer: 'elk'
          }},
          securityLevel: 'loose',
          theme: 'default',
          // SIGNIFICANTLY INCREASED MAXTEXTSIZE
          maxTextSize: 99999999, // Setting a very high limit to accommodate large text
          // Zoom and Pan options for Mermaid itself (if supported by the renderer)
          // For 'htmlLabels: true', browser's native zoom usually works best.
          zoom: 1, // Initial zoom level
          pan: {{ x: 0, y: 0 }} // Initial pan position
      }});
    </script>
</head>
<body>
    <div class="mermaid">
{mermaid_code}
    </div>
</body>
</html>
"""

    # Save to file
    with open(output_filename, "w", encoding="utf-8") as f:
        f.write(html_template)

    print(f"âœ… Mermaid graph exported to '{output_filename}'. You can now open it in your browser.")

if __name__ == "__main__":
    # Example Usage
    tasks = [
        "Understand the user's request for a new feature",
        "Create a detailed technical specification",
        "Develop the backend API endpoints",
        "Design the user interface and user experience",
        "Implement the frontend components",
        "Integrate frontend with backend",
        "Write unit and integration tests",
        "Deploy the feature to the staging environment",
        "Perform final QA and testing",
        "Release the feature to production"
    ]

    # Dependencies: (Task Index, [List of tasks it depends on])
    deps = [
        (1, [0]),
        (2, [1]),
        (3, [1]),
        (4, [3]),
        (5, [2, 4]),
        (6, [5]),
        (7, [6]),
        (8, [7]),
        (9, [8])
    ]

    generate_mermaid_diagram(tasks, deps, "feature_development_flow.html")
