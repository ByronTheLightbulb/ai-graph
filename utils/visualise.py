def create_mermaid_diagram(task_descriptions, dependencies, output_filename="mermaid_diagram.html"):
    """
    Generates an HTML file containing a Mermaid diagram from task descriptions and dependencies.
    This version includes enhanced styling for better readability of large node labels and
    improved zoomability/interactivity, with a significantly increased maxTextSize.

    Args:
        task_descriptions (list): A list of strings, where each string is the description of a task.
        dependencies (list): A list of tuples, where each tuple represents a dependency
                              (e.g., ('target_task_index', [dependent_task_index1, ...])).
        output_filename (str): The name of the HTML file to be generated.
    """

    mermaid_graph_lines = ["graph TD"]

    for i, desc in enumerate(task_descriptions):
        mermaid_graph_lines.append(f'T{i}["{desc}"]')

    for node, deps in dependencies:
        for dep in deps:
            mermaid_graph_lines.append(f"T{dep} --> T{node}")

    mermaid_code = "\n".join(mermaid_graph_lines)

    html_template = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Mermaid Task Dependency Graph</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            background-color: #f0f2f5;
        }}
        .mermaid {{
            width: 100%;
            max-width: fit-content;
            height: auto;
            display: block;
            overflow: auto;
            padding: 30px;
            box-sizing: border-box;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            /* Enable full zooming and panning */
            touch-action: pan-x pan-y;
        }}
        /* Styles for the SVG generated by Mermaid */
        .mermaid svg {{
            max-width: none !important;
            height: auto !important;
            overflow: visible !important;
            /* Allow larger rendering space if needed */
            min-width: 1200px; /* Example: ensure a minimum width */
            min-height: 800px; /* Example: ensure a minimum height */
        }}
        /* Styles for individual nodes and their text */
        .node rect {{
            fill: #e6f7ff;
            stroke: #337ab7;
            stroke-width: 1.5px;
            rx: 5px;
            ry: 5px;
        }}
        .node text {{
            font-size: 16px !important;
            fill: #333;
            text-anchor: middle;
            dominant-baseline: central;
            white-space: pre-wrap;
            word-wrap: break-word;
            padding: 10px;
        }}
        /* Ensure that the text element itself wraps */
        .node foreignObject {{
            overflow: visible !important;
        }}
        .node label {{
            display: block;
            text-align: center;
            padding: 8px;
            box-sizing: border-box;
            word-break: break-word;
            /* Optional: limit height/width if you want to force more wrapping earlier */
            /* max-width: 250px; */
            /* max-height: 200px; */
        }}
    </style>
    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
      mermaid.initialize({{
          startOnLoad: true,
          flowchart: {{
              curve: 'basis',
              htmlLabels: true,
              nodeSpacing: 100,
              rankSpacing: 100,
              // You can also try 'elk' renderer for potentially better layout with complex diagrams
              // defaultRenderer: 'elk'
          }},
          securityLevel: 'loose',
          theme: 'default',
          // SIGNIFICANTLY INCREASED MAXTEXTSIZE
          maxTextSize: 99999999, // Setting a very high limit to accommodate large text
          // Zoom and Pan options for Mermaid itself (if supported by the renderer)
          // For 'htmlLabels: true', browser's native zoom usually works best.
          zoom: 1, // Initial zoom level
          pan: {{ x: 0, y: 0 }} // Initial pan position
      }});
    </script>
</head>
<body>
    <div class="mermaid">
{mermaid_code}
    </div>
</body>
</html>
"""

    # Save to file
    with open(output_filename, "w", encoding="utf-8") as f:
        f.write(html_template)

    print(f"âœ… Mermaid graph exported to '{output_filename}'. You can now open it in your browser.")
